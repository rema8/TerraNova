// src/game/systems/badgeManager.js

import Phaser from "phaser"; 
import { PROGRESSION } from "./ProgressionManager";

// Utiliser l'EventEmitter int√©gr√© √† Phaser
class BadgeManager extends Phaser.Events.EventEmitter { 
  constructor() {
    super();
    this.solvedPuzzles = new Set();
    this.unlockedBadges = new Set();
  }

  // Enregistre qu'une √©nigme a √©t√© r√©solue et v√©rifie si un badge est √† d√©bloquer
  solvePuzzle(puzzleId, badgeId) {
    if (this.solvedPuzzles.has(puzzleId)) {
      console.log(`[Badges] √ânigme ${puzzleId} d√©j√† r√©solue.`);
      return;
    }

    this.solvedPuzzles.add(puzzleId);

    if (badgeId && !this.unlockedBadges.has(badgeId)) {
      this.unlockedBadges.add(badgeId);
      
      // √âv√©nement pour la notification UI
      this.emit("badgeUnlocked", { id: badgeId, puzzle: puzzleId });
      
      //  NOUVEL √âV√âNEMENT : Informe la sc√®ne de red√©marrer apr√®s une progression r√©ussie
      const sceneKey = PROGRESSION[puzzleId]?.scene;
      if (sceneKey) {
          this.emit("progressed", { puzzleId, scene: sceneKey }); 
      }
      
      console.log(`üéâ Badge d√©bloqu√© : ${badgeId} !`);
    }
  }

  getBadges() {
    return Array.from(this.unlockedBadges);
  }
}

export const badgeManager = new BadgeManager();