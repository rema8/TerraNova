// src/game/systems/badgeManager.js

// üö® REMPLACER : import { EventEmitter } from "events";
// PAR :
import Phaser from "phaser"; 

// Utiliser l'EventEmitter int√©gr√© √† Phaser
class BadgeManager extends Phaser.Events.EventEmitter { 
  constructor() {
    super();
    // Cl√©: ID de l'√©nigme | Valeur: ID du badge d√©bloqu√©
    this.solvedPuzzles = new Set();
    this.unlockedBadges = new Set();
  }

  // Enregistre qu'une √©nigme a √©t√© r√©solue et v√©rifie si un badge est √† d√©bloquer
  solvePuzzle(puzzleId, badgeId) {
    if (this.solvedPuzzles.has(puzzleId)) {
      console.log(`[Badges] √ânigme ${puzzleId} d√©j√† r√©solue.`);
      return;
    }

    this.solvedPuzzles.add(puzzleId);

    if (badgeId && !this.unlockedBadges.has(badgeId)) {
      this.unlockedBadges.add(badgeId);
      // Le manager √©met l'√©v√©nement de la m√™me mani√®re que l'ancien code
      this.emit("badgeUnlocked", { id: badgeId, puzzle: puzzleId });
      console.log(`üéâ Badge d√©bloqu√© : ${badgeId} !`);
    }
  }

  getBadges() {
    return Array.from(this.unlockedBadges);
  }
}

export const badgeManager = new BadgeManager();